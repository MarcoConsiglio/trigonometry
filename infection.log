Escaped mutants:
================

1) /home/vagrant/code/packages/trigonometry/src/Angle.php:224    [M] MulEqual

--- Original
+++ New
@@ @@
     public function toDecimal() : float
     {
         $decimal = $this->degrees + $this->minutes / 60 + $this->seconds / 3600;
-        $decimal *= $this->direction;
+        $decimal /= $this->direction;
         return $decimal;
     }
     /**


2) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:47    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @param float $data
      * @return void
      */
-    protected function validate(float $data)
+    private function validate(float $data)
     {
         if (abs($data) > Angle::MAX_DEGREES) {
             throw new AngleOverflowException("The angle can't be greather than 360°.");


3) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:71    [M] Minus

--- Original
+++ New
@@ @@
      */
     public function calcMinutes()
     {
-        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES, 0, PHP_ROUND_HALF_DOWN));
+        $this->minutes = intval(round((abs($this->decimal) + $this->degrees) * Angle::MAX_MINUTES, 0, PHP_ROUND_HALF_DOWN));
     }
     /**
      * Calc seconds.


4) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:71    [M] Multiplication

--- Original
+++ New
@@ @@
      */
     public function calcMinutes()
     {
-        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES, 0, PHP_ROUND_HALF_DOWN));
+        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) / Angle::MAX_MINUTES, 0, PHP_ROUND_HALF_DOWN));
     }
     /**
      * Calc seconds.


5) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:71    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function calcMinutes()
     {
-        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES, 0, PHP_ROUND_HALF_DOWN));
+        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES, -1, PHP_ROUND_HALF_DOWN));
     }
     /**
      * Calc seconds.


6) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:71    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     public function calcMinutes()
     {
-        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES, 0, PHP_ROUND_HALF_DOWN));
+        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES, 1, PHP_ROUND_HALF_DOWN));
     }
     /**
      * Calc seconds.


7) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:71    [M] RoundingFamily

--- Original
+++ New
@@ @@
      */
     public function calcMinutes()
     {
-        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES, 0, PHP_ROUND_HALF_DOWN));
+        $this->minutes = intval(floor((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES));
     }
     /**
      * Calc seconds.


8) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:71    [M] RoundingFamily

--- Original
+++ New
@@ @@
      */
     public function calcMinutes()
     {
-        $this->minutes = intval(round((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES, 0, PHP_ROUND_HALF_DOWN));
+        $this->minutes = intval(ceil((abs($this->decimal) - $this->degrees) * Angle::MAX_MINUTES));
     }
     /**
      * Calc seconds.


9) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:81    [M] RoundingFamily

--- Original
+++ New
@@ @@
      */
     public function calcSeconds()
     {
-        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS, 1, PHP_ROUND_HALF_DOWN);
+        $this->seconds = floor((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS);
     }
     /**
      * Calc sign.


10) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:81    [M] RoundingFamily

--- Original
+++ New
@@ @@
      */
     public function calcSeconds()
     {
-        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS, 1, PHP_ROUND_HALF_DOWN);
+        $this->seconds = ceil((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS);
     }
     /**
      * Calc sign.


11) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:82    [M] Multiplication

--- Original
+++ New
@@ @@
      */
     public function calcSeconds()
     {
-        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS, 1, PHP_ROUND_HALF_DOWN);
+        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) / Angle::MAX_MINUTES * Angle::MAX_SECONDS, 1, PHP_ROUND_HALF_DOWN);
     }
     /**
      * Calc sign.


12) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:82    [M] Multiplication

--- Original
+++ New
@@ @@
      */
     public function calcSeconds()
     {
-        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS, 1, PHP_ROUND_HALF_DOWN);
+        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES / Angle::MAX_SECONDS, 1, PHP_ROUND_HALF_DOWN);
     }
     /**
      * Calc sign.


13) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:86    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function calcSeconds()
     {
-        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS, 1, PHP_ROUND_HALF_DOWN);
+        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS, 0, PHP_ROUND_HALF_DOWN);
     }
     /**
      * Calc sign.


14) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:86    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     public function calcSeconds()
     {
-        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS, 1, PHP_ROUND_HALF_DOWN);
+        $this->seconds = round((abs($this->decimal) - $this->degrees - $this->minutes / Angle::MAX_MINUTES) * Angle::MAX_MINUTES * Angle::MAX_SECONDS, 2, PHP_ROUND_HALF_DOWN);
     }
     /**
      * Calc sign.


15) /home/vagrant/code/packages/trigonometry/src/Builders/FromDecimal.php:97    [M] LessThan

--- Original
+++ New
@@ @@
      */
     public function calcSign()
     {
-        if ($this->decimal < 0) {
+        if ($this->decimal <= 0) {
             $this->sign = Angle::COUNTER_CLOCKWISE;
         }
     }


16) /home/vagrant/code/packages/trigonometry/src/Builders/FromDegrees.php:56    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @param int  $sing
      * @return boolean
      */
-    protected function validate(int $degrees, int $minutes, float $seconds, int $sing = Angle::CLOCKWISE)
+    private function validate(int $degrees, int $minutes, float $seconds, int $sing = Angle::CLOCKWISE)
     {
         if ($degrees > 360) {
             throw new AngleOverflowException("The angle degrees can't be greater than 360°.");


17) /home/vagrant/code/packages/trigonometry/src/Builders/FromDegrees.php:61    [M] GreaterThan

--- Original
+++ New
@@ @@
         if ($degrees > 360) {
             throw new AngleOverflowException("The angle degrees can't be greater than 360°.");
         }
-        if ($minutes > 59) {
+        if ($minutes >= 59) {
             throw new AngleOverflowException("The angle minutes can't be greater than 59'.");
         }
         if ($seconds >= 60) {


18) /home/vagrant/code/packages/trigonometry/src/Builders/FromRadiant.php:87    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @param float $data
      * @return void
      */
-    protected function validate(float $data)
+    private function validate(float $data)
     {
         if (abs($data) > Angle::MAX_RADIANT) {
             throw new AngleOverflowException("The angle can't be greater than 360°.");


19) /home/vagrant/code/packages/trigonometry/src/Builders/FromString.php:56    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @throws \MarcoConsiglio\Trigonometry\Exceptions\NoMatchException No angle measure is found.
      * @throws \MarcoConsiglio\Trigonometry\Exceptions\RegExFailureException Error while parsing with a regular expression.
      */
-    protected function parseDegreesString(string $angle)
+    private function parseDegreesString(string $angle)
     {
         $this->parsing_status = preg_match(Angle::ANGLE_REGEX, $angle, $this->matches);
     }


20) /home/vagrant/code/packages/trigonometry/src/Builders/FromString.php:77    [M] GreaterThan

--- Original
+++ New
@@ @@
             throw new NoMatchException("Can't recognize the string {$this->measure}.");
         }
         // The Angle::REGEX is a bit buggy. It accepts degrees greater than 360°.
-        if ($this->matches[2] > 360) {
+        if ($this->matches[2] >= 360) {
             throw new AngleOverflowException("The angle degrees can't be greater than 360°.");
         }
     }


21) /home/vagrant/code/packages/trigonometry/src/Builders/FromString.php:89    [M] CastInt

--- Original
+++ New
@@ @@
      */
     public function calcDegrees()
     {
-        $this->degrees = abs((int) $this->matches[2]);
+        $this->degrees = abs($this->matches[2]);
     }
     /**
      * Calc minutes.


22) /home/vagrant/code/packages/trigonometry/src/Builders/FromString.php:99    [M] CastInt

--- Original
+++ New
@@ @@
      */
     public function calcMinutes()
     {
-        $this->minutes = (int) $this->matches[3];
+        $this->minutes = $this->matches[3];
     }
     /**
      * Calc seconds.


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /home/vagrant/code/packages/trigonometry/src/Builders/FromString.php:69    [M] FalseValue

--- Original
+++ New
@@ @@
     public function checkOverflow()
     {
         // @codeCoverageIgnoreStart
-        if ($this->parsing_status === false) {
+        if ($this->parsing_status === true) {
             throw new RegExFailureException(preg_last_error_msg());
         }
         // @codeCoverageIgnoreEnd


2) /home/vagrant/code/packages/trigonometry/src/Builders/FromString.php:69    [M] Identical

--- Original
+++ New
@@ @@
     public function checkOverflow()
     {
         // @codeCoverageIgnoreStart
-        if ($this->parsing_status === false) {
+        if ($this->parsing_status !== false) {
             throw new RegExFailureException(preg_last_error_msg());
         }
         // @codeCoverageIgnoreEnd


3) /home/vagrant/code/packages/trigonometry/src/Builders/FromString.php:70    [M] Throw_

--- Original
+++ New
@@ @@
     {
         // @codeCoverageIgnoreStart
         if ($this->parsing_status === false) {
-            throw new RegExFailureException(preg_last_error_msg());
+            new RegExFailureException(preg_last_error_msg());
         }
         // @codeCoverageIgnoreEnd
         if ($this->parsing_status === 0) {


4) /home/vagrant/code/packages/trigonometry/src/Operations/Sum.php:115    [M] LessThan

--- Original
+++ New
@@ @@
     {
         if ($sum > Angle::MAX_DEGREES) {
             $sum -= Angle::MAX_DEGREES;
-        } elseif ($sum < -Angle::MAX_DEGREES) {
+        } elseif ($sum <= -Angle::MAX_DEGREES) {
             $sum += Angle::MAX_DEGREES;
         }
         return $sum;
     }
 }


5) /home/vagrant/code/packages/trigonometry/src/Operations/Sum.php:115    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     {
         if ($sum > Angle::MAX_DEGREES) {
             $sum -= Angle::MAX_DEGREES;
-        } elseif ($sum < -Angle::MAX_DEGREES) {
+        } elseif ($sum >= -Angle::MAX_DEGREES) {
             $sum += Angle::MAX_DEGREES;
         }
         return $sum;
     }
 }


6) /home/vagrant/code/packages/trigonometry/src/Operations/Sum.php:116    [M] Assignment

--- Original
+++ New
@@ @@
         if ($sum > Angle::MAX_DEGREES) {
             $sum -= Angle::MAX_DEGREES;
         } elseif ($sum < -Angle::MAX_DEGREES) {
-            $sum += Angle::MAX_DEGREES;
+            $sum = Angle::MAX_DEGREES;
         }
         return $sum;
     }
 }


7) /home/vagrant/code/packages/trigonometry/src/Operations/Sum.php:116    [M] PlusEqual

--- Original
+++ New
@@ @@
         if ($sum > Angle::MAX_DEGREES) {
             $sum -= Angle::MAX_DEGREES;
         } elseif ($sum < -Angle::MAX_DEGREES) {
-            $sum += Angle::MAX_DEGREES;
+            $sum -= Angle::MAX_DEGREES;
         }
         return $sum;
     }
 }
